# _*_ coding: utf-8 _*_
"""Validators for ``pydantic`` Custom DataType"""
import importlib
from pathlib import Path
from typing import Union

from pydantic.class_validators import make_generic_validator
from pydantic.types import StrBytes

from .fhirabstractmodel import FHIRAbstractModel

__author__ = "Md Nazrul Islam<email2nazrul@gmail.com>"

MODEL_CLASSES = {
     "FHIRPrimitiveExtension": (None, ".fhirprimitiveextension"),
     {%- for klass in classes %}
     "{{ klass.name }}": (None, ".{{klass.module }}"),
     {% endfor -%}
}

def get_fhir_model_class(model_name: str) -> FHIRAbstractModel:
    """
    """
    global MODEL_CLASSES
    klass, module_name = MODEL_CLASSES[model_name]
    if klass is not None:
        return klass
    module = importlib.import_module(module_name, package=__package__)
    klass = getattr(module, model_name)
    MODEL_CLASSES[model_name] = (klass, module_name)
    return klass

def run_validator_for_fhir_type(model_type_cls, v, values, config, field):
    """ """
    cls = get_fhir_model_class(model_type_cls.__resource_type__)
    for validator in model_type_cls.__get_validators__():
        func = make_generic_validator(validator)
        v = func(cls, v, values, config, field)
    return v

def fhir_model_validator(model_name: str, v: Union[StrBytes, dict, Path, FHIRAbstractModel]):
    """ """
    model_class = get_fhir_model_class(model_name)
    if isinstance(v, (str, bytes)):
        v = model_class.parse_raw(v)
    elif isinstance(v, Path):
        v = model_class.parse_file(v)
    elif isinstance(v, dict):
        v = model_class.parse_obj(v)
    if not isinstance(v, FHIRAbstractModel):
        raise ValueError()
    if model_name != v.resource_type:
        raise ValueError
    return v

def fhirprimitiveextension_validator(v: Union[StrBytes, dict, Path, FHIRAbstractModel]):

    return fhir_model_validator("FHIRPrimitiveExtension", v)


{%- for klass in classes %}
def {{ klass.name | lower }}_validator(v: Union[StrBytes, dict, Path, FHIRAbstractModel]):

	return fhir_model_validator("{{ klass.name }}", v)
{% endfor -%}

__all__ = [
    "fhirprimitiveextension_validator",
    {%- for klass in classes %}
	"{{ klass.name | lower }}_validator",
	{% endfor -%}
]
