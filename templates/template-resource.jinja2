# -*- coding: utf-8 -*-
"""
Profile: {{ profile.url }}
Release: {{ release_name }}
Version: {{ profile.fhir_version }}
{%- if info.build %}
Build ID: {{ info.build }}
{%- elif info.revision %}
Revision: {{ info.revision }}
{%- endif %}
Last updated: {{ profile.fhir_last_updated }}
"""
{%- if has_array_type %}
from typing import List
{% endif %}
from pydantic import Field
{%- if need_fhirtypes %}
from . import fhirtypes
{% endif %}
{%- set imported = {} %}
{%- for klass in classes %}


{% if klass.superclass in imports and klass.superclass.module not in imported -%}
from . import {{ klass.superclass.module }}
{% set _ = imported.update({klass.superclass.module: True}) %}
{% endif -%}

class {{ klass.name }}({% if klass.superclass in imports %}{{ klass.superclass.module }}.{% endif -%}
    {{ klass.superclass.name|default('object')}}):
    """ {{ klass.short|wordwrap(width=75, wrapstring="\n    ") }}.
{%- if klass.formal %}
    {{ klass.formal|wordwrap(width=75, wrapstring="\n    ") }}
{%- endif %}
    """
{%- if klass.resource_type %}
    resourceType = Field("{{ klass.resource_type }}", const=True)
{%- endif %}
{%- for prop in klass.properties %}
	{% set type_klass_ %}
		{%- if prop.field_type_module %}{{ prop.field_type_module }}.{{ prop.field_type }}{% else %}{{ prop.field_type }}{% endif -%}
	{%endset -%}
	{%- set type_klass %}
		{%- if prop.is_array %}List[{{ type_klass_ }}]{% else %}{{ type_klass_ }}{% endif -%}
	{% endset %}
	{%- set title %}
		{% if prop.is_array %}List of{% else %}Type{% endif %} `{{ prop.class_name }}`{% if prop.is_array %} items{% endif %}
		{%- if prop.reference_to_names|length > 0 %} referencing `{{ prop.reference_to_names|join(', ') }}`{% endif %}
		{%- if prop.json_class != prop.class_name %} (represented as `{{ prop.json_class }}` in JSON){% endif %}
	{% endset %}
    {{ prop.name }}: {{ type_klass }} = Field(
		{% if prop.nonoptional %}...{% else %}None{% endif %},
		alias="{{ prop.orig_name }}",
		title={{ title|trim|replace("\n", "")|tojson }},
		description={{ prop.short|tojson }},
        {%- if prop.one_of_many%}
		one_of_many="{{ prop.one_of_many }}", # Choice of Data Types. i.e value[x]
		one_of_many_required={% if prop.nonoptional %}True{% else %}False{% endif %}
        {% endif -%}
	)

{%- endfor %}

{%- endfor %}

