{% import 'macros.jinja2' as custom_mac -%}
# -*- coding: utf-8 -*-
"""
Profile: {{ profile.url }}
Release: {{ release_name }}
Version: {{ info.version }}
{%- if info.build %}
Build ID: {{ info.build }}
{%- elif info.revision %}
Revision: {{ info.revision }}
{%- endif %}
Last updated: {{ profile.fhir_last_updated }}
"""
from pathlib import Path

from .fixtures import bytes_validator, ExternalValidatorModel  # noqa: F401
from .. import {{ class.module }}

{%- for tcase in tests %}


def impl_{{ class.name | lower }}_{{ loop.index }}(inst):
{%- for onetest in tcase.tests %}
{%- if onetest.klass.name in ("String", "Code", "Id", "Oid", "Xhtml", "Uuid", "Canonical", "Markdown") %}
    assert inst.{{ onetest.path }} == {{ custom_mac.pep8_string_wrap(onetest.value | replace('"', '\\"') | replace('\\n', '\\\\n'), width=60, to_json=False).rstrip()}}
{%- else %}{% if onetest.klass.name == "Base64Binary" %}
    assert inst.{{ onetest.path }} == bytes_validator({{ custom_mac.pep8_string_wrap(onetest.value, width=60, to_json=False).rstrip() }})
{%- else %}{% if onetest.klass.name in ("Integer", "UnsignedInt", "PositiveInt") %}
    assert inst.{{ onetest.path }} == {{ onetest.value }}
{%- else %}{% if onetest.klass.name in ("Decimal", "NSDecimalNumber") %}
    assert float(inst.{{ onetest.path }}) == float({{ onetest.value }})
{%- else %}{% if "bool" == onetest.klass.name %}
    {%- if onetest.value %}
    assert inst.{{ onetest.path }} is True
    {%- else %}
    assert inst.{{ onetest.path }} is False
    {%- endif %}
{%- else %}{% if onetest.klass.name in ("DateTime", "Instant", "Date", "Time", "Uri", "Url") %}
    assert inst.{{ onetest.path }} == ExternalValidatorModel(value{{ onetest.klass.name }}="{{ onetest.value }}").value{{ onetest.klass.name }}
{%- else %}
    # Don't know how to create unit test
    # for "{{ onetest.path }}",
    # which is a {{ onetest.klass.name }}
{%- endif %}{% endif %}{% endif %}{% endif %}{% endif %}{% endif %}
{%- endfor %}


def test_{{ class.name | lower}}_{{ loop.index }}(base_settings):
    """No. {{ loop.index }} tests collection for {{ class.name }}.
    Test File: {{ tcase.filename }}
    """
    filename = (
        base_settings["unittest_data_dir"] / "{{ tcase.filename }}"
    )
    inst = {{ class.module }}.{{ class.name }}.model_validate_json(Path(filename).read_bytes())
    assert "{{ class.name }}" == inst.get_resource_type()

    impl_{{ class.name | lower }}_{{ loop.index }}(inst)

    # testing reverse by generating data from itself and create again.
    data = inst.model_dump()
    assert "{{ class.name }}" == data["resourceType"]

    inst2 = {{ class.module }}.{{ class.name }}(**data)
    impl_{{ class.name | lower }}_{{ loop.index }}(inst2)


{%- endfor %}


