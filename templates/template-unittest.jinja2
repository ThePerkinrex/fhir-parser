# -*- coding: utf-8 -*-
"""
Profile: {{ profile.url }}
Release: {{ release_name }}
Version: {{ info.version }}
{%- if info.build %}
Build ID: {{ info.build }}
{%- elif info.revision %}
Revision: {{ info.revision }}
{%- endif %}
Last updated: {{ profile.fhir_last_updated }}
"""

import os
import pytest
import io
import unittest
import json
from pydantic.validators import parse_datetime
from pydantic.validators import parse_date
from pydantic.validators import parse_time

from .fixtures import force_bytes
from .. import {{ class.module }}


@pytest.mark.usefixtures("base_settings")
class {{ class.name }}Tests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r') as handle:
            js = json.load(handle)
            self.assertEqual("{{ class.name }}", js["resourceType"])
        return {{ class.module }}.{{ class.name }}(**js)

{%- for tcase in tests %}

    def test{{ class.name }}{{ loop.index }}(self):
        inst = self.instantiate_from("{{ tcase.filename }}")
        self.assertIsNotNone(inst, "Must have instantiated a {{ class.name }} instance")
        self.impl{{ class.name }}{{ loop.index }}(inst)

        js = inst.dict()
        self.assertEqual("{{ class.name }}", js["resourceType"])
        inst2 = {{ class.module }}.{{ class.name }}(**js)
        self.impl{{ class.name }}{{ loop.index }}(inst2)

    def impl{{ class.name }}{{ loop.index }}(self, inst):
    {%- for onetest in tcase.tests %}
    {%- if onetest.klass.name in ("String", "Code", "Id", "Uri", "Oid", "Xhtml") %}
        self.assertEqual(force_bytes(inst.{{ onetest.path }}), force_bytes("{{ onetest.value | replace('"', '\\"') | replace('\\n', '\\\\n') }}"))
    {%- else %}{% if "Decimal" == onetest.klass.name or "Integer" == onetest.klass.name or "NSDecimalNumber" == onetest.klass.name %}
        self.assertEqual(inst.{{ onetest.path }}, {{ onetest.value }})
    {%- else %}{% if "bool" == onetest.klass.name %}
        {%- if onetest.value %}
        self.assertTrue(inst.{{ onetest.path }})
        {%- else %}
        self.assertFalse(inst.{{ onetest.path }})
        {%- endif %}
    {%- else %}{% if onetest.klass.name in ("DateTime", "Instant") %}
        self.assertEqual(inst.{{ onetest.path }}, parse_datetime("{{ onetest.value }}"))
	{%- else %}{% if onetest.klass.name in ("Date",) %}
        self.assertEqual(inst.{{ onetest.path }}, parse_date("{{ onetest.value }}"))
	{%- else %}{% if onetest.klass.name in ("Time",) %}
        self.assertEqual(inst.{{ onetest.path }}, parse_time("{{ onetest.value }}"))
    {%- else %}
        # Don't know how to create unit test for "{{ onetest.path }}", which is a {{ onetest.klass.name }}
    {%- endif %}{% endif %}{% endif %}{% endif %}{% endif %}{% endif %}
    {%- endfor %}
{%- endfor %}


